
Web log hosting site with Flask and Python
"Your team has been contracted to create a web log hosting site, with the following features:

    Users will have to register to use the site.
    A logged-in user will be able to
        Create a new blog
        Update their blog by adding a new entry
        View and edit their own past entries
        View the blogs of other users"

WE want you to write the code using python and flask in order to serve this webapp. Main python file is named __init__.py, and serves html files located in /templates

Sure, I'll provide the code for the main Python file (__init__.py) using Flask which will serve the web application. This file will handle user registration, login, blog creation, updating, viewing, and editing entries.
Public code references from 18 repositories

1 vulnerability detected

You will also need corresponding HTML templates in the /templates directory. I will provide a few examples for the templates.
Public code references from 5 repositories

Public code references from 6 repositories

Public code references from 6 repositories

Public code references from 4 repositories

Public code references from 6 repositories

Public code references from 4 repositories

Public code references from 4 repositories

This setup includes user registration, login, blog creation, viewing, and editing entries. You can further expand and customize the application as needed.
Traceback (most recent call last):
  File "/home/students/odd/2025/csong50/Software_Development/softdev/35_mxrobbotto/app/init.py", line 110, in <module>
    db.create_all()
  File "/home/students/odd/2025/csong50/Software_Development/foo/lib/python3.10/site-packages/flask_sqlalchemy/extension.py", line 900, in create_all
    self._call_for_binds(bind_key, "create_all")
  File "/home/students/odd/2025/csong50/Software_Development/foo/lib/python3.10/site-packages/flask_sqlalchemy/extension.py", line 871, in _call_for_binds
    engine = self.engines[key]
  File "/home/students/odd/2025/csong50/Software_Development/foo/lib/python3.10/site-packages/flask_sqlalchemy/extension.py", line 687, in engines
    app = current_app._get_current_object()  # type: ignore[attr-defined]
  File "/home/students/odd/2025/csong50/Software_Development/foo/lib/python3.10/site-packages/werkzeug/local.py", line 519, in _get_current_object
    raise RuntimeError(unbound_message) from None
RuntimeError: Working outside of application context.

This typically means that you attempted to use functionality that needed
the current application. To solve this, set up an application context
with app.app_context(). See the documentation for more information.

We got this error. Can you please fix it?

The error message indicates that the code is trying to perform database operations outside of the application context. To fix this, you need to ensure that the db.create_all() call is made within the application context. You can achieve this by using the app.app_context() context manager.

Here's the updated __init__.py:
Python

from flask import Flask, render_template, request, redirect, url_for, session, flash
from flask_sqlalchemy import SQLAlchemy
from werkzeug.security import generate_password_hash, check_password_hash

app = Flask(__name__)
app.config['SECRET_KEY'] = 'your_secret_key'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///blog.db'

db = SQLAlchemy(app)

# User model
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(150), unique=True, nullable=False)
    password = db.Column(db.String(150), nullable=False)

# Blog model
class Blog(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    title = db.Column(db.String(100), nullable=False)

# Entry model
class Entry(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    blog_id = db.Column(db.Integer, db.ForeignKey('blog.id'), nullable=False)
    content = db.Column(db.Text, nullable=False)

@app.route('/')
def index():
    if 'username' in session:
        user = User.query.filter_by(username=session['username']).first()
        blogs = Blog.query.filter_by(user_id=user.id).all()
        return render_template('index.html', blogs=blogs)
    return redirect(url_for('login'))

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        hashed_password = generate_password_hash(password, method='sha256')
        new_user = User(username=username, password=hashed_password)
        db.session.add(new_user)
        db.session.commit()
        flash('Registration successful! Please log in.')
        return redirect(url_for('login'))
    return render_template('register.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        user = User.query.filter_by(username=username).first()
        if user and check_password_hash(user.password, password):
            session['username'] = user.username
            return redirect(url_for('index'))
        flash('Invalid username or password.')
    return render_template('login.html')

@app.route('/logout')
def logout():
    session.pop('username', None)
    return redirect(url_for('login'))

@app.route('/create_blog', methods=['GET', 'POST'])
def create_blog():
    if 'username' in session:
        if request.method == 'POST':
            title = request.form['title']
            user = User.query.filter_by(username=session['username']).first()
            new_blog = Blog(title=title, user_id=user.id)
            db.session.add(new_blog)
            db.session.commit()
            return redirect(url_for('index'))
        return render_template('create_blog.html')
    return redirect(url_for('login'))

@app.route('/blog/<int:blog_id>')
def view_blog(blog_id):
    blog = Blog.query.get_or_404(blog_id)
    entries = Entry.query.filter_by(blog_id=blog.id).all()
    return render_template('view_blog.html', blog=blog, entries=entries)

@app.route('/add_entry/<int:blog_id>', methods=['GET', 'POST'])
def add_entry(blog_id):
    if 'username' in session:
        if request.method == 'POST':
            content = request.form['content']
            new_entry = Entry(content=content, blog_id=blog_id)
            db.session.add(new_entry)
            db.session.commit()
            return redirect(url_for('view_blog', blog_id=blog_id))
        return render_template('add_entry.html', blog_id=blog_id)
    return redirect(url_for('login'))

@app.route('/edit_entry/<int:entry_id>', methods=['GET', 'POST'])
def edit_entry(entry_id):
    entry = Entry.query.get_or_404(entry_id)
    if 'username' in session:
        if request.method == 'POST':
            entry.content = request.form['content']
            db.session.commit()
            return redirect(url_for('view_blog', blog_id=entry.blog_id))
        return render_template('edit_entry.html', entry=entry)
    return redirect(url_for('login'))

if __name__ == '__main__':
    with app.app_context():
        db.create_all()
    app.run(debug=True)

Public code references from 17 repositories

    github.com/Munoy/Munoy license
    github.com/anurag247200/myapp license
    github.com/yae1999/WebApp license
    github.com/kitelife/JustABlog license
    github.com/Robert-Rino/flask-login-exampleMIT license
    github.com/GoldenEagle74/Lessons license
    github.com/shobviznali/flask license
    github.com/moncherid/User-registration- license
    github.com/tinybike/SuperModular license
    github.com/nicolewhite/neo4j-flask license
    github.com/the-mausoleum/wordpress-deploy license
    github.com/abhirathod95/Conquest license
    github.com/salmanghouridev/INSIGHT-EYE license
    github.com/romio-krvtsky/softarex-project license
    github.com/baran61/Task-Manager-App-with-Python license
    github.com/VanLance/tom_capstone license
    github.com/sspzoa/ThisIsProject license

In this updated code, the with app.app_context(): block ensures that db.create_all() is called within the application context, avoiding the RuntimeError you encountered.
When we tried to register, we got this error: Invalid hash method 'sha256'. Can you explain what this means and fix it too?

The error "Invalid hash method 'sha256'" indicates that the hashing method provided to the generate_password_hash function is not recognized or supported. This can happen if there is a typo or if the hashing method is not correctly specified.

To fix this, you should use the correct hashing method available in the werkzeug.security library. The correct hashing method should be specified as part of the method argument.

Here's the updated __init__.py with the correct hashing method:
Public code references from 14 repositories

1 vulnerability detected

In this update, the generate_password_hash method is now correctly specified as pbkdf2:sha256, which is a valid hashing method in the werkzeug.security library. This should resolve the "Invalid hash method 'sha256'" error.
Please work in the confinements of these requirements for requirement.txt:

blinker==1.8.2
click==8.1.7
Flask==3.0.3
itsdangerous==2.2.0
Jinja2==3.1.4
MarkupSafe==2.1.5
Werkzeug==3.0.4

Sure, here is the requirements.txt file with the specified versions:
Regenerate the necessary code according to these requirements without using additional libraries

Sure, here is the updated __init__.py file and the requirements.txt file as per your requirements. This updated code does not use additional libraries and ensures compatibility with the specified versions in requirements.txt.
Public code references from 14 repositories

1 vulnerability detected

Don't use flask_sqlalchemy. It's outisde the scope of our project. Please also don't use any unnecessary libraries.

Sure, I'll provide the updated __init__.py file without flask_sqlalchemy and using only necessary libraries.
Public code references from 9 repositories

1 vulnerability detected

This code uses SQLite directly through the sqlite3 library instead of flask_sqlalchemy. It handles user registration, login, blog creation, viewing, and editing entries while complying with the specified libraries.
When we log in as a new user, we can't see the blogs that other users have created. There might be an issue with how the blogs are stored in SQLite. Can you fix it please?

To ensure that users can see blogs created by other users, you need to modify the code to retrieve and display blogs from all users, not just the logged-in user.

Here's the updated __init__.py file to fix this issue:
Public code references from 9 repositories

1 vulnerability detected

In this updated code, the index route now retrieves and displays all blogs, not just those belonging to the logged-in user. This allows users to see blogs created by other users as well.
Can you prevent users from editing other people's entries please?

Sure, I will update the code to ensure that users can only edit their own entries. This involves checking if the logged-in user is the owner of the entry before allowing them to edit it.

Here's the updated __init__.py file:
Public code references from 9 repositories

1 vulnerability detected

In this updated code, the edit_entry route checks if the logged-in user is the owner of the entry before allowing them to edit it. If they are not the owner, a flash message is shown, and the user is redirected to the index page.
When we log in as another user, the edit button is still there even though we can't edit it. Can you remove the button?

Sure, to remove the edit button for users who do not own the entry, we need to add a check in the template to conditionally render the button based on the ownership of the entry.

Here are the updated templates and __init__.py to achieve this.
__init__.py
Public code references from 9 repositories

2 vulnerabilities detected

    Hardcoded CredentialsEmbedding credentials in source code risks unauthorized access
    Hardcoded CredentialsEmbedding credentials in source code risks unauthorized access

templates/view_blog.html

In this update, the view_blog.html template checks if the logged-in user is the owner of the blog before displaying the "Edit" button. This ensures that only the owner of the entry can see the "Edit" button.

Sure, to remove the edit button for users who do not own the entry, we need to add a check in the template to conditionally render the button based on the ownership of the entry. Here are the updated templates and __init__.py to achieve this. __init__.py __init__.py v7 from flask import Flask, render_template, request, redirect, url_for, session, flash import sqlite3 from werkzeug.security import generate_password_hash, check_password_hash app = Flask(__name__) Public code references from 9 repositories 2 vulnerabilities detected templates/view_blog.html templates/view_blog.html v2 <!DOCTYPE html> <html> <head> <title>{{ blog.title }}</title> </head> In this update, the view_blog.html template checks if the logged-in user is the owner of the blog before displaying the "Edit" button. This ensures that only the owner of the entry can see the "Edit" button.

